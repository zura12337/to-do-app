{"version":3,"sources":["components/ListItem.tsx","components/Block.tsx","components/List.tsx","services/tasks.ts","components/NavBar.tsx","App.tsx","index.tsx"],"names":["ListItem","name","index","type","draggableId","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","style","backgroundColor","isDragging","color","animation","className","Block","tasks","listName","listTitle","droppableId","isDraggingOver","droppableProps","map","placeholder","List","useState","setTasks","useEffect","newTasks","localStorage","getItem","JSON","parse","getTasks","onDragEnd","result","destination","source","splice","reorderedTasks","setItem","stringify","reorderTasks","NavBar","expanded","setExpanded","task","setTask","onClick","onSubmit","e","preventDefault","length","newTask","parsedTasks","taskArray","push","createTask","onChange","target","value","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ac866be.chunk.js","sourcesContent":["import React from \"react\";\n// @ts-ignore\nimport { Draggable } from \"react-beautiful-dnd\";\nimport Item from \"./Item\";\n\nexport default function ListItem({ name, index, type }: Item) {\n  return (\n    <Draggable draggableId={`${name}-${index}`} index={index} key={index}>\n      {(provided: any, snapshot: any) => (\n        <div\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          ref={provided.innerRef}\n          style={{\n            backgroundColor: snapshot.isDragging\n              ? \"#ebebeb\"\n              : type === \"done\"\n              ? \"#888888\"\n              : \"#ffffff\",\n            color: type === \"done\" && !snapshot.isDragging && \"white\",\n            animation: \".2s all\",\n            ...provided.draggableProps.style,\n          }}\n          className=\"list-item\"\n        >\n          <span className=\"item-title\">{name}</span>\n        </div>\n      )}\n    </Draggable>\n  );\n}\n","import React from \"react\";\n// @ts-ignore\nimport { Droppable } from \"react-beautiful-dnd\";\nimport ListItem from \"./ListItem\";\nimport Item from \"./Item\";\n\ninterface Props {\n  tasks: Array<any>;\n  listName: string;\n  listTitle: string;\n}\n\nexport default function Block({ tasks, listName, listTitle }: Props) {\n  return (\n    <Droppable droppableId={listName}>\n      {(provided: any, snapshot: any) => (\n        <div\n          className={`block ${listName}`}\n          style={{\n            backgroundColor: snapshot.isDraggingOver ? \"#e2e2e2\" : \"#F2EFEF\",\n          }}\n        >\n          <h3 className=\"title\">{listTitle}</h3>\n          <div\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n            className=\"list\"\n          >\n            {tasks.map(\n              ({ name, type }: Item, index: number) =>\n                type === listName && (\n                  <ListItem type={type} key={index} name={name} index={index} />\n                )\n            )}\n            {provided.placeholder}\n          </div>\n        </div>\n      )}\n    </Droppable>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { getTasks, reorderTasks } from \"../services/tasks\";\n// @ts-ignore\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport Block from \"./Block\";\n\nexport default function List() {\n  const [tasks, setTasks] = useState([]);\n\n  useEffect(() => {\n    const newTasks: [] = getTasks();\n    setTasks(newTasks);\n  }, [tasks]);\n\n  const handleDragEnd = (result: any) => {\n    if (!result.destination) return;\n    const newTasks = [...tasks];\n\n    if (result.source.droppableId !== result.destination.droppableId) {\n      let item: { type: string; name: string } = newTasks[result.source.index];\n      item.type = result.destination.droppableId;\n    }\n    const [reorderedTasks] = newTasks.splice(result.source.index, 1);\n    newTasks.splice(result.destination.index, 0, reorderedTasks);\n\n    reorderTasks(newTasks);\n    setTasks(newTasks);\n  };\n\n  return (\n    <div className=\"content\">\n      <DragDropContext onDragEnd={handleDragEnd}>\n        <Block tasks={tasks} listName=\"to-do\" listTitle={\"To Do\"} />\n        <Block tasks={tasks} listName=\"in-progress\" listTitle={\"In Progress\"} />\n        <Block tasks={tasks} listName=\"done\" listTitle={\"Done\"} />\n      </DragDropContext>\n    </div>\n  );\n}\n","export function createTask(newTask: object) {\n  let tasks: string | null = localStorage.getItem(\"tasks\");\n  if (typeof tasks === \"string\") {\n    let parsedTasks: Array<object> = JSON.parse(tasks);\n    parsedTasks[parsedTasks.length] = newTask;\n    localStorage.setItem(\"tasks\", JSON.stringify(parsedTasks));\n  } else {\n    let taskArray = [];\n    taskArray.push(newTask);\n    localStorage.setItem(\"tasks\", JSON.stringify(taskArray));\n  }\n}\n\nexport function getTasks() {\n  const tasks = localStorage.getItem(\"tasks\");\n  if (typeof tasks === \"string\") {\n    return JSON.parse(tasks);\n  } else {\n    return [];\n  }\n}\n\nexport function reorderTasks(tasks: any) {\n  localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n}\n","import React, { useState } from \"react\";\nimport { createTask } from \"../services/tasks\";\n\nexport default function NavBar() {\n  const [expanded, setExpanded] = useState(false);\n  const [task, setTask] = useState(\"\");\n\n  const handleClick = () => {\n    setExpanded(!expanded);\n  };\n\n  const handleSubmit = (e: { preventDefault: () => void }) => {\n    e.preventDefault();\n    setExpanded(false);\n    if (task.length < 1) return;\n    createTask({ type: \"to-do\", name: task });\n  };\n\n  return (\n    <div>\n      <nav>\n        <button onClick={handleClick} className=\"add-new-task\">\n          Add Task\n        </button>\n        {expanded && (\n          <form onSubmit={handleSubmit} className=\"new-task-form\">\n            <input\n              onChange={(e) => setTask(e.target.value)}\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Enter To Do...\"\n            />\n            <button type=\"submit\" className=\"submit-form\">\n              ✔️\n            </button>\n          </form>\n        )}\n      </nav>\n    </div>\n  );\n}\n","import React from \"react\";\nimport List from \"./components/List\";\nimport NavBar from \"./components/NavBar\";\n\nfunction App() {\n  return (\n    <>\n      <NavBar />\n      <List />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}