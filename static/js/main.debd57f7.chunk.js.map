{"version":3,"sources":["components/ListItem.tsx","components/Block.tsx","components/List.tsx","services/tasks.ts","components/NavBar.tsx","App.tsx","index.tsx"],"names":["ListItem","name","index","type","draggableId","provided","snapshot","draggingOver","console","log","draggableProps","dragHandleProps","ref","innerRef","style","backgroundColor","isDragging","color","animation","className","Block","tasks","listName","listTitle","droppableId","isDraggingOver","droppableProps","map","placeholder","List","useState","setTasks","showPopover","setShowPopover","useEffect","newTasks","localStorage","getItem","JSON","parse","getTasks","onDragEnd","result","destination","splice","source","reorderedTasks","setItem","stringify","reorderTasks","CSSTransition","in","timeout","classNames","unmountOnExit","onClick","NavBar","expanded","setExpanded","task","setTask","onSubmit","e","preventDefault","length","newTask","parsedTasks","taskArray","push","createTask","onChange","target","value","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.debd57f7.chunk.js","sourcesContent":["import React from \"react\";\n// @ts-ignore\nimport { Draggable } from \"react-beautiful-dnd\";\nimport Item from \"./Item\";\n\nexport default function ListItem({ name, index, type }: Item) {\n  return (\n    <Draggable draggableId={`${name}-${index}`} index={index} key={index}>\n      {(provided: any, snapshot: any) => {\n        if (snapshot.draggingOver === \"trash\") {\n          console.log(snapshot);\n        }\n        return (\n          <div\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            ref={provided.innerRef}\n            style={{\n              backgroundColor: snapshot.isDragging\n                ? \"#ebebeb\"\n                : type === \"done\"\n                ? \"#888888\"\n                : \"#ffffff\",\n              color: type === \"done\" && !snapshot.isDragging && \"white\",\n              animation: \".2s all\",\n              ...provided.draggableProps.style,\n            }}\n            className=\"list-item\"\n          >\n            <span className=\"item-title\">{name}</span>\n          </div>\n        );\n      }}\n    </Draggable>\n  );\n}\n","import React from \"react\";\n// @ts-ignore\nimport { Droppable } from \"react-beautiful-dnd\";\nimport ListItem from \"./ListItem\";\nimport Item from \"./Item\";\n\ninterface Props {\n  tasks: Array<any>;\n  listName: string;\n  listTitle: string;\n}\n\nexport default function Block({ tasks, listName, listTitle }: Props) {\n  return (\n    <Droppable droppableId={listName}>\n      {(provided: any, snapshot: any) => (\n        <div\n          className={`block ${listName}`}\n          style={{\n            backgroundColor: snapshot.isDraggingOver ? \"#e2e2e2\" : \"#F2EFEF\",\n          }}\n        >\n          <h3 className=\"title\">{listTitle}</h3>\n          <div\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n            className=\"list\"\n          >\n            {tasks.map(\n              ({ name, type }: Item, index: number) =>\n                type === listName && (\n                  <ListItem type={type} key={index} name={name} index={index} />\n                )\n            )}\n            {provided.placeholder}\n          </div>\n        </div>\n      )}\n    </Droppable>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { getTasks, reorderTasks } from \"../services/tasks\";\n// @ts-ignore\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport Block from \"./Block\";\n// @ts-ignore\nimport { CSSTransition } from \"react-transition-group\";\n\nexport default function List() {\n  const [tasks, setTasks] = useState([]);\n  const [showPopover, setShowPopover] = useState(false);\n\n  useEffect(() => {\n    const newTasks: [] = getTasks();\n    setTasks(newTasks);\n  }, []);\n\n  const handleDragEnd = (result: any) => {\n    console.log(result.destination);\n    if (!result.destination) return;\n    const newTasks = [...tasks];\n    if (result.destination.droppableId === \"trash\") {\n      newTasks.splice(result.source.index, 1);\n    } else {\n      if (result.source.droppableId !== result.destination.droppableId) {\n        let item: { type: string; name: string } =\n          newTasks[result.source.index];\n        item.type = result.destination.droppableId;\n      }\n      const [reorderedTasks] = newTasks.splice(result.source.index, 1);\n      newTasks.splice(result.destination.index, 0, reorderedTasks);\n    }\n    reorderTasks(newTasks);\n    setTasks(newTasks);\n  };\n\n  return (\n    <div className=\"content\">\n      <DragDropContext onDragEnd={handleDragEnd}>\n        <Block tasks={tasks} listName=\"to-do\" listTitle={\"To Do\"} />\n        <Block tasks={tasks} listName=\"in-progress\" listTitle={\"In Progress\"} />\n        <Block tasks={tasks} listName=\"done\" listTitle={\"Done\"} />\n        <Droppable droppableId=\"trash\">\n          {(provided: any, snapshot: any) => (\n            <div\n              className=\"trash\"\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n            >\n              <div className=\"trash-inner\">\n                <CSSTransition\n                  in={showPopover}\n                  timeout={300}\n                  classNames=\"trash\"\n                  unmountOnExit\n                >\n                  <div className=\"trash-popover\">\n                    <p>Drag Any item here to remove them. 🗑</p>\n                  </div>\n                </CSSTransition>\n                {/* {showPopover && (\n                  <div className=\"trash-popover\">\n                    <p>Drag Any item here to remove them. 🗑</p>\n                    <button\n                      className=\"popover-close\"\n                      onClick={() => setShowPopover(false)}\n                    >\n                      X\n                    </button>\n                  </div>\n                )} */}\n                <h3 onClick={() => setShowPopover(!showPopover)}>🗑</h3>\n              </div>\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </div>\n  );\n}\n","export function createTask(newTask: object) {\n  let tasks: string | null = localStorage.getItem(\"tasks\");\n  if (typeof tasks === \"string\") {\n    let parsedTasks: Array<object> = JSON.parse(tasks);\n    parsedTasks[parsedTasks.length] = newTask;\n    localStorage.setItem(\"tasks\", JSON.stringify(parsedTasks));\n  } else {\n    let taskArray = [];\n    taskArray.push(newTask);\n    localStorage.setItem(\"tasks\", JSON.stringify(taskArray));\n  }\n}\n\nexport function getTasks() {\n  const tasks = localStorage.getItem(\"tasks\");\n  if (typeof tasks === \"string\") {\n    return JSON.parse(tasks);\n  } else {\n    return [];\n  }\n}\n\nexport function reorderTasks(tasks: any) {\n  localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n}\n","import React, { useState } from \"react\";\nimport { createTask } from \"../services/tasks\";\n\nexport default function NavBar() {\n  const [expanded, setExpanded] = useState(false);\n  const [task, setTask] = useState(\"\");\n\n  const handleClick = () => {\n    setExpanded(!expanded);\n  };\n\n  const handleSubmit = (e: { preventDefault: () => void }) => {\n    e.preventDefault();\n    setExpanded(false);\n    if (task.length < 1) return;\n    createTask({ type: \"to-do\", name: task });\n  };\n\n  return (\n    <div>\n      <nav>\n        <button onClick={handleClick} className=\"add-new-task\">\n          Add Task\n        </button>\n        {expanded && (\n          <form onSubmit={handleSubmit} className=\"new-task-form\">\n            <input\n              onChange={(e) => setTask(e.target.value)}\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Enter To Do...\"\n            />\n            <button type=\"submit\" className=\"submit-form\">\n              ✔️\n            </button>\n          </form>\n        )}\n      </nav>\n    </div>\n  );\n}\n","import React from \"react\";\nimport List from \"./components/List\";\nimport NavBar from \"./components/NavBar\";\n\nfunction App() {\n  return (\n    <>\n      <NavBar />\n      <List />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}