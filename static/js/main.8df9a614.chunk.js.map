{"version":3,"sources":["components/ListItem.tsx","components/Block.tsx","components/List.tsx","components/NavBar.tsx","App.tsx","services/tasks.ts","index.tsx"],"names":["ListItem","name","index","type","draggableId","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","style","backgroundColor","isDragging","color","animation","className","Block","tasks","listName","listTitle","droppableId","isDraggingOver","droppableProps","length","map","placeholder","List","setTasks","useState","showPopover","setShowPopover","onDragEnd","result","destination","newTasks","splice","source","reorderedTasks","CSSTransition","in","timeout","classNames","unmountOnExit","onClick","NavBar","expanded","setExpanded","task","setTask","onSubmit","e","preventDefault","onChange","target","value","App","initialState","JSON","parse","localStorage","getItem","stringify","setValue","useEffect","setItem","useLocalStorage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8df9a614.chunk.js","sourcesContent":["import React from \"react\";\n// @ts-ignore\nimport { Draggable } from \"react-beautiful-dnd\";\nimport Item from \"./Item\";\n\nexport default function ListItem({ name, index, type }: Item) {\n  return (\n    <Draggable draggableId={`${name}-${index}`} index={index} key={index}>\n      {(provided: any, snapshot: any) => {\n        return (\n          <div\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            ref={provided.innerRef}\n            style={{\n              backgroundColor: snapshot.isDragging\n                ? \"#ebebeb\"\n                : type === \"done\"\n                ? \"#888888\"\n                : \"#ffffff\",\n              color: type === \"done\" && !snapshot.isDragging && \"white\",\n              animation: \".2s all\",\n              ...provided.draggableProps.style,\n            }}\n            className=\"list-item\"\n          >\n            <span className=\"item-title\">{name}</span>\n          </div>\n        );\n      }}\n    </Draggable>\n  );\n}\n","import React from \"react\";\n// @ts-ignore\nimport { Droppable } from \"react-beautiful-dnd\";\nimport ListItem from \"./ListItem\";\nimport Item from \"./Item\";\n\ninterface Props {\n  tasks: Array<any>;\n  listName: string;\n  listTitle: string;\n}\n\nexport default function Block({ tasks, listName, listTitle }: Props) {\n  return (\n    <Droppable droppableId={listName}>\n      {(provided: any, snapshot: any) => (\n        <div\n          className={`block ${listName}`}\n          style={{\n            backgroundColor: snapshot.isDraggingOver ? \"#e2e2e2\" : \"#F2EFEF\",\n          }}\n        >\n          <h3 className=\"title\">{listTitle}</h3>\n          <div\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n            className=\"list\"\n          >\n            {tasks.length > 0 &&\n              tasks.map(\n                ({ name, type }: Item, index: number) =>\n                  type === listName && (\n                    <ListItem\n                      type={type}\n                      key={index}\n                      name={name}\n                      index={index}\n                    />\n                  )\n              )}\n            {provided.placeholder}\n          </div>\n        </div>\n      )}\n    </Droppable>\n  );\n}\n","import React, { useState } from \"react\";\n// @ts-ignore\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport Block from \"./Block\";\n// @ts-ignore\nimport { CSSTransition } from \"react-transition-group\";\n\n// @ts-ignore\nexport default function List({ tasks, setTasks }) {\n  const [showPopover, setShowPopover] = useState(false);\n\n  const handleDragEnd = (result: any) => {\n    if (!result.destination) return;\n    let newTasks = [...tasks];\n    if (result.destination.droppableId === \"trash\") {\n      newTasks.splice(result.source.index, 1);\n    } else {\n      if (result.source.droppableId !== result.destination.droppableId) {\n        let item: { type: string; name: string } =\n          newTasks[result.source.index];\n        item.type = result.destination.droppableId;\n      }\n      const [reorderedTasks] = newTasks.splice(result.source.index, 1);\n      newTasks.splice(result.destination.index, 0, reorderedTasks);\n    }\n    setTasks(newTasks);\n  };\n\n  return (\n    <div className=\"content\">\n      <DragDropContext onDragEnd={handleDragEnd}>\n        <Block tasks={tasks} listName=\"to-do\" listTitle={\"To Do\"} />\n        <Block tasks={tasks} listName=\"in-progress\" listTitle={\"In Progress\"} />\n        <Block tasks={tasks} listName=\"done\" listTitle={\"Done\"} />\n        <Droppable droppableId=\"trash\">\n          {(provided: any, snapshot: any) => (\n            <div\n              className=\"trash\"\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n            >\n              <div className=\"trash-inner\">\n                <CSSTransition\n                  in={showPopover}\n                  timeout={300}\n                  classNames=\"trash\"\n                  unmountOnExit\n                >\n                  <div className=\"trash-popover\">\n                    <p>Drag Any item here to remove them. üóë</p>\n                  </div>\n                </CSSTransition>\n                {showPopover && (\n                  <div className=\"trash-popover\">\n                    <p>Drag Any item here to remove them. üóë</p>\n                    <button\n                      className=\"popover-close\"\n                      onClick={() => setShowPopover(false)}\n                    >\n                      X\n                    </button>\n                  </div>\n                )}\n                <h3 onClick={() => setShowPopover(!showPopover)}>üóë</h3>\n              </div>\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\n\n// @ts-ignore\nexport default function NavBar({ tasks, setTasks }) {\n  const [expanded, setExpanded] = useState(false);\n  const [task, setTask] = useState(\"\");\n\n  const handleClick = () => {\n    setExpanded(!expanded);\n  };\n\n  const handleSubmit = (e: { preventDefault: () => void }) => {\n    e.preventDefault();\n    setExpanded(false);\n    if (task.length < 1) return;\n    setTasks([{ type: \"to-do\", name: task }, ...tasks]);\n  };\n\n  return (\n    <div>\n      <nav>\n        <button onClick={handleClick} className=\"add-new-task\">\n          Add Task\n        </button>\n        {expanded && (\n          <form onSubmit={handleSubmit} className=\"new-task-form\">\n            <input\n              onChange={(e) => setTask(e.target.value)}\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Enter To Do...\"\n            />\n            <button type=\"submit\" className=\"submit-form\">\n              ‚úîÔ∏è\n            </button>\n          </form>\n        )}\n      </nav>\n    </div>\n  );\n}\n","import React from \"react\";\nimport List from \"./components/List\";\nimport NavBar from \"./components/NavBar\";\nimport { useLocalStorage } from \"./services/tasks\";\n\nfunction App() {\n  const [tasks, setTasks] = useLocalStorage([{}]);\n\n  return (\n    <>\n      <NavBar tasks={tasks} setTasks={setTasks} />\n      <List tasks={tasks} setTasks={setTasks} />\n    </>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from \"react\";\n\nexport const useLocalStorage = (initialState: [object]) => {\n  const get = () => {\n    const tasks = JSON.parse(\n      localStorage.getItem(\"tasks\") || JSON.stringify(initialState)\n    );\n    return tasks;\n  };\n\n  const [value, setValue] = useState(get());\n\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(value));\n  }, [value]);\n\n  return [value, setValue];\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}